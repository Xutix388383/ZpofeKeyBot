
--// Services
local Players = game:GetService("Players")
local RbxAnalytics = game:GetService("RbxAnalyticsService")
local HttpService = game:GetService("HttpService")
local MarketplaceService = game:GetService("MarketplaceService")

--// HWID
local function getHWID()
    return RbxAnalytics:GetClientId()
end

local hwid = getHWID()

--// API Endpoints (Updated to use your Discord bot system)
local API_BASE = "https://your-koyeb-app.koyeb.app" -- Replace with your actual Koyeb URL
local verifyEndpoint = API_BASE .. "/verify"
local statusEndpoint = API_BASE .. "/status/"
local resetEndpoint = API_BASE .. "/reset"

--// Discord Webhooks
local logWebhook = "https://discord.com/api/webhooks/1404969249201717379/N2GYn33X0LiijkdqcZkmCKcr4tQNl94bmcTmUT6IIVZDb8rQ6M3NxgN86ENCMh7YVwbN"
local keyWebhook = "https://discord.com/api/webhooks/1404900022331375696/Vsc7frrjNS-u0OKs1_qwSjMIBQjBJoL2qC7kHV570n4QiROBfp003YWiH23vzoHQuChc"

--// Key Save/Load
local keyFile = "ZpofesKey.txt"
local savedKey = isfile and readfile and isfile(keyFile) and readfile(keyFile) or nil

--// Rayfield Loader
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()

--// Execution Logger
local function logExecution()
    local executor = identifyexecutor and identifyexecutor() or "Unknown"
    local gameName = MarketplaceService:GetProductInfo(game.PlaceId).Name or "Unknown"
    local placeId = game.PlaceId
    local timestamp = os.date("%Y-%m-%d %H:%M:%S")

    local data = {
        content = string.format(
            "üöÄ **Loader Executed**\nHWID: `%s`\nExecutor: `%s`\nGame: `%s`\nPlace ID: `%s`\nTime: `%s`\nVersion: `v2.0 (Discord Bot Integration)`",
            hwid, executor, gameName, placeId, timestamp
        )
    }

    pcall(function()
        HttpService:PostAsync(logWebhook, HttpService:JSONEncode(data), Enum.HttpContentType.ApplicationJson)
    end)
end

logExecution()

--// Key Verification Function
local function verifyKey(key, hwid)
    local success, response = pcall(function()
        local url = verifyEndpoint .. "?key=" .. key .. "&hwid=" .. hwid
        return HttpService:GetAsync(url)
    end)
    
    if not success then
        return false, "Failed to connect to verification server"
    end
    
    local data = HttpService:JSONDecode(response)
    return data.success, data.message or "Unknown error"
end

--// Discord Logger for Key Attempts
local function logAttempt(key, status)
    local executor = identifyexecutor and identifyexecutor() or "Unknown"
    local gameName = MarketplaceService:GetProductInfo(game.PlaceId).Name or "Unknown"
    local placeId = game.PlaceId
    local timestamp = os.date("%Y-%m-%d %H:%M:%S")

    local data = {
        content = string.format(
            "üîê **ZpofeHub Auth Attempt**\nKey: `%s`\nHWID: `%s`\nExecutor: `%s`\nGame: `%s`\nPlace ID: `%s`\nStatus: `%s`\nTime: `%s`\nSystem: Discord Bot Integration",
            key, hwid, executor, gameName, placeId, status, timestamp
        )
    }

    pcall(function()
        HttpService:PostAsync(keyWebhook, HttpService:JSONEncode(data), Enum.HttpContentType.ApplicationJson)
    end)
end

--// GUI Setup
local Window = Rayfield:CreateWindow({
    Name = "üîê ZpofeHub Login",
    LoadingTitle = "Authenticating...",
    LoadingSubtitle = "Discord Bot Verification",
    Theme = "Midnight",
    Background = "https://raw.githubusercontent.com/zpofes/assets/main/nebula.png",
    ConfigurationSaving = { Enabled = false }
})

local AuthTab = Window:CreateTab("üîë Authenticate", 4483362458)

local hwidLabel = AuthTab:CreateParagraph({
    Title = "üîí Your HWID",
    Content = hwid
})

local statusParagraph = AuthTab:CreateParagraph({
    Title = "Status",
    Content = "Awaiting key... Get your key from Discord using /userpanel"
})

local keyAuthorized = false
local currentKey = ""
local fallbackButton = nil

--// Key Input
local keyInput = AuthTab:CreateInput({
    Name = "üîë License Key",
    PlaceholderText = "ZPOFES-XXXXXXXXXXXX",
    RemoveTextAfterFocusLost = false,
    Callback = function(Text)
        currentKey = Text
    end,
})

--// Verify Button
local verifyButton = AuthTab:CreateButton({
    Name = "üîç Verify Key",
    Callback = function()
        if currentKey == "" then
            statusParagraph:Set({
                Title = "‚ùå Error",
                Content = "Please enter a license key"
            })
            logAttempt(currentKey, "Empty Key")
            return
        end

        if not string.find(currentKey, "ZPOFES%-") then
            statusParagraph:Set({
                Title = "‚ùå Error",
                Content = "Invalid key format"
            })
            logAttempt(currentKey, "Invalid Format")
            return
        end

        statusParagraph:Set({
            Title = "üîÑ Verifying",
            Content = "Verifying license key with Discord bot..."
        })

        local verified, message = verifyKey(currentKey, hwid)
        
        if verified then
            statusParagraph:Set({
                Title = "‚úÖ Success",
                Content = "Key verified! Loading hub..."
            })
            
            logAttempt(currentKey, "Success")
            keyAuthorized = true
            
            -- Save key
            if writefile then
                writefile(keyFile, currentKey)
            end
            
            -- Load main hub
            wait(1)
            loadHub(currentKey)
        else
            statusParagraph:Set({
                Title = "‚ùå Failed",
                Content = message
            })
            logAttempt(currentKey, "Failed: " .. message)
        end
    end,
})

--// Auto-load saved key
if savedKey and savedKey ~= "" then
    spawn(function()
        wait(1)
        statusParagraph:Set({
            Title = "üîÑ Auto-Verifying",
            Content = "Checking saved key..."
        })
        
        local verified, message = verifyKey(savedKey, hwid)
        
        if verified then
            statusParagraph:Set({
                Title = "‚úÖ Auto-Success",
                Content = "Saved key verified! Loading hub..."
            })
            
            keyAuthorized = true
            currentKey = savedKey
            logAttempt(savedKey, "Auto-Success")
            
            wait(1)
            loadHub(savedKey)
        else
            statusParagraph:Set({
                Title = "‚ö†Ô∏è Saved Key Invalid",
                Content = "Please enter a new key: " .. message
            })
            
            -- Delete invalid saved key
            if delfile and isfile(keyFile) then
                delfile(keyFile)
            end
            
            logAttempt(savedKey, "Auto-Failed: " .. message)
        end
    end)
end

--// Fallback Button (if needed)
local fallbackButton = AuthTab:CreateButton({
    Name = "üÜò Get Key from Discord",
    Callback = function()
        setclipboard("/userpanel")
        statusParagraph:Set({
            Title = "üìã Copied",
            Content = "Copied '/userpanel' to clipboard. Use this command in Discord!"
        })
    end,
})

--// Load Full Hub
function loadHub(usedKey)
    Window:Destroy()
    
    local HubWindow = Rayfield:CreateWindow({
        Name = "üõ∞Ô∏è ZpofeHub v2.0",
        LoadingTitle = "ZpofeHub Interface Suite",
        LoadingSubtitle = "‚ö° Discord Bot Powered. Trusted. Stealth.",
        Theme = "Midnight",
        Background = "https://raw.githubusercontent.com/zpofes/assets/main/nebula.png",
        ConfigurationSaving = {
            Enabled = true,
            FolderName = "ZpofeHub",
            FileName = "Settings"
        }
    })

    --// Welcome notification
    Rayfield:Notify({
        Title = "üéâ Welcome to ZpofeHub!",
        Content = "Successfully authenticated with Discord bot system",
        Duration = 6.5,
        Image = 4483362458,
        Actions = {
            Ignore = {
                Name = "Thanks!",
                Callback = function()
                    print("User acknowledged welcome")
                end
            },
        },
    })

    --// Main Tab
    local MainTab = HubWindow:CreateTab("üè† Main", 4483362458)
    
    local welcomeLabel = MainTab:CreateParagraph({
        Title = "üëã Welcome to ZpofeHub v2.0",
        Content = "üîë Key: " .. usedKey .. "\nüíª HWID: " .. hwid:sub(1, 20) .. "...\nüöÄ Status: Premium Verified\n‚ö° System: Discord Bot Integration"
    })

    --// Scripts Tab
    local ScriptsTab = HubWindow:CreateTab("üìú Scripts", 4483362458)
    
    ScriptsTab:CreateSection("üéÆ Game Scripts")
    
    local scriptsList = {
        {name = "Universal ESP", desc = "Works in all games"},
        {name = "Speed Hack", desc = "Adjustable speed multiplier"},
        {name = "Jump Power", desc = "Enhanced jumping ability"},
        {name = "Fly Script", desc = "Free movement in air"},
        {name = "Infinite Jump", desc = "Jump without limits"},
        {name = "Noclip", desc = "Walk through walls"},
        {name = "Teleport GUI", desc = "Quick teleportation"},
        {name = "Auto Farm", desc = "Automated resource collection"}
    }
    
    for i, script in ipairs(scriptsList) do
        ScriptsTab:CreateButton({
            Name = "üöÄ " .. script.name,
            Callback = function()
                Rayfield:Notify({
                    Title = "‚úÖ Script Loaded",
                    Content = script.name .. " has been executed!",
                    Duration = 3,
                    Image = 4483362458,
                })
                
                -- Log script execution
                local data = {
                    content = string.format(
                        "üìú **Script Executed**\nScript: `%s`\nUser Key: `%s`\nHWID: `%s`\nGame: `%s`\nTime: `%s`",
                        script.name, usedKey, hwid, game.PlaceId, os.date("%Y-%m-%d %H:%M:%S")
                    )
                }
                
                pcall(function()
                    HttpService:PostAsync(logWebhook, HttpService:JSONEncode(data), Enum.HttpContentType.ApplicationJson)
                end)
                
                -- Add your actual script execution here
                print("Executing:", script.name)
            end,
        })
    end

    --// Settings Tab
    local SettingsTab = HubWindow:CreateTab("‚öôÔ∏è Settings", 4483362458)
    
    SettingsTab:CreateSection("üîß Configuration")
    
    local keyInfoLabel = SettingsTab:CreateParagraph({
        Title = "üîë Key Information",
        Content = "Licensed Key: " .. usedKey .. "\nHWID Bound: Yes\nStatus: Active\nType: Premium"
    })
    
    SettingsTab:CreateButton({
        Name = "üîÑ Reset HWID",
        Callback = function()
            local resetData = {
                key = usedKey
            }
            
            local success, response = pcall(function()
                return HttpService:PostAsync(resetEndpoint, HttpService:JSONEncode(resetData), Enum.HttpContentType.ApplicationJson)
            end)
            
            if success then
                local result = HttpService:JSONDecode(response)
                if result.success then
                    Rayfield:Notify({
                        Title = "‚úÖ HWID Reset",
                        Content = "Your HWID has been reset successfully!",
                        Duration = 5,
                        Image = 4483362458,
                    })
                else
                    Rayfield:Notify({
                        Title = "‚ùå Reset Failed",
                        Content = result.message or "Unknown error",
                        Duration = 5,
                        Image = 4483362458,
                    })
                end
            else
                Rayfield:Notify({
                    Title = "‚ùå Connection Error",
                    Content = "Failed to connect to reset service",
                    Duration = 5,
                    Image = 4483362458,
                })
            end
        end,
    })
    
    SettingsTab:CreateButton({
        Name = "üìã Copy Key",
        Callback = function()
            setclipboard(usedKey)
            Rayfield:Notify({
                Title = "üìã Copied",
                Content = "License key copied to clipboard!",
                Duration = 3,
                Image = 4483362458,
            })
        end,
    })
    
    SettingsTab:CreateButton({
        Name = "üóëÔ∏è Delete Saved Key",
        Callback = function()
            if delfile and isfile(keyFile) then
                delfile(keyFile)
                Rayfield:Notify({
                    Title = "üóëÔ∏è Deleted",
                    Content = "Saved key has been deleted",
                    Duration = 3,
                    Image = 4483362458,
                })
            end
        end,
    })

    --// Info Tab
    local InfoTab = HubWindow:CreateTab("‚ÑπÔ∏è Info", 4483362458)
    
    InfoTab:CreateSection("üìä System Information")
    
    local systemInfo = InfoTab:CreateParagraph({
        Title = "üõ∞Ô∏è ZpofeHub v2.0 Information",
        Content = "üîê Security: Discord Bot Integration\n‚ö° Performance: Optimized & Stealth\nüõ°Ô∏è Protection: HWID Binding\nüîÑ Updates: Real-time via API\nüìà Uptime: 99.9% reliability\nüåê Support: Discord community"
    })
    
    InfoTab:CreateButton({
        Name = "üîó Join Discord",
        Callback = function()
            setclipboard("https://discord.gg/your-discord")
            Rayfield:Notify({
                Title = "üìã Discord Link Copied",
                Content = "Join our Discord for support and updates!",
                Duration = 5,
                Image = 4483362458,
            })
        end,
    })
    
    InfoTab:CreateButton({
        Name = "üìà Check Status",
        Callback = function()
            local success, response = pcall(function()
                return HttpService:GetAsync(statusEndpoint .. usedKey)
            end)
            
            if success then
                local data = HttpService:JSONDecode(response)
                if data.success then
                    Rayfield:Notify({
                        Title = "‚úÖ Status Check",
                        Content = "Key is active and valid!",
                        Duration = 3,
                        Image = 4483362458,
                    })
                else
                    Rayfield:Notify({
                        Title = "‚ö†Ô∏è Status Warning",
                        Content = "Key status unknown",
                        Duration = 3,
                        Image = 4483362458,
                    })
                end
            else
                Rayfield:Notify({
                    Title = "‚ùå Connection Error",
                    Content = "Failed to check status",
                    Duration = 3,
                    Image = 4483362458,
                })
            end
        end,
    })
end

print("üöÄ ZpofeHub v2.0 Discord Bot Integration Loaded")
print("üí° Use /userpanel in Discord to get your license key")
print("üîê Hardware ID: " .. hwid)
